#!/bin/bash

SCRIPTNAME=install-unattend
SCRIPTURL=https://raw.githubusercontent.com/vm75/arch-setup/main/install-unattend

# defaults
COUNTRIES=US                  # -c
TIMEZONE=America/Los_Angeles  # -t
LTS=                          # -L
LOCALE=en_US.UTF-8            # -l
KEYMAP=us                     # -k
HOSTNAME=server               # -n
USERNAME=admin                # -u
PASSWORD=admin                # -p
SSHKEY=                       # -s
BIOS_BOOTLOADER               # -b

error() {
  local msg=${1}
  echo -e "\e[31m${SCRIPTNAME}: $1\e[0m"
  exit -1
}

checkError() {
  if [[ $? -ne 0 ]] ; then
    error "Error while $1"
  fi
}

gen_wifi_auth() {
  local ssid=$1
  local key=$2

  if [[ -z ${ssid} || -z ${key} ]] ; then
    error "No valid ssid/key pair"
  fi

  local psk=$(wpa_passphrase "${ssid}" "${key}" | grep -e "\spsk" | cut -d= -f2)
  echo -e "[Security]\nPreSharedKey=${psk}" | tee "${3:-/var/lib/iwd/${ssid}.psk}"
}

init_wifi() {
  ssid=$(echo $0 | cut -d: -f1)
  key=$(echo $0 | cut -d: -f2-)
  wlint=$(ip a | grep " wl" | grep CAST | sed 's/.* \(wl\w\+\):.*/\1/')
  if [[ $wlint != "" ]] ; then
    gen_wifi_auth ${ssid} "${key}"
    if [[ ! -z ${ssid} ]] ; then
      iwctl station wlan0 connect ${ssid}
      if [[ $? -ne 0 ]] ; then
        return
      fi

      echo "Waiting 10 secs..."
      sleep 10
    fi
  fi
}

init_os() {
  # update
  pacman -Syy --noconfirm
  pacman -Sy --noconfirm reflector archlinux-keyring
  checkError "initializing pacman"

  # set mirrors
  echo "Setting up reflectors..."
  reflector -c "${COUNTRIES}" -f 12 -l 10 -n 12 --save /etc/pacman.d/mirrorlist
  checkError "setting reflectors"

  # set date-time
  setup_datetime
}

setup_drive() {
  dev=$1

  if [[ ${BIOS_BOOTLOADER} == -b ]] ; then
    # create partition
    (
    echo g      # Create a new empty GPT partition table
    echo n      # Add a new partition
    echo        # Auto-select partition number
    echo        # Auto-select partition start
    echo +1M    # Partition Size
    echo t      # Change type
    echo 4      # BIOS boot partition
    echo        # Auto-select partition
    echo n      # Add a new partition
    echo        # Auto-select partition number
    echo        # Auto-select partition start
    echo        # Auto-select partition end

    echo w      # Write changes
    ) | fdisk -W always ${dev}
  else
    # create partition
    (
    echo g      # Create a new empty GPT partition table
    echo n      # Add a new partition
    echo        # Auto-select partition number
    echo        # Auto-select partition start
    echo +512M  # Partition Size
    echo t      # Change type
    echo 1      # EFI parttion
    echo        # Auto-select partition
    echo n      # Add a new partition
    echo        # Auto-select partition number
    echo        # Auto-select partition start
    echo        # Auto-select partition end

    echo w      # Write changes
    ) | fdisk -W always ${dev}
  fi

  checkError "partitioning ${dev}"

  export partBoot=${DEVICE}1
  export partRoot=${DEVICE}2

  # format partitions
  if [[ ${BIOS_BOOTLOADER} != -b ]] ; then
    mkfs.fat -F32 ${partBoot}
    checkError "formatting ${partBoot}"
  fi
  mkfs.ext4 ${partRoot}
  checkError "formatting ${partRoot}"
}

setup_datetime() {
  hwclock --systohc
  timedatectl set-ntp true
  systemctl enable systemd-timesyncd.service
  checkError "enabling systemd-timesyncd"

  if [[ ! -z ${POST_PACSTRAP} ]] ; then
    timedatectl set-timezone ${TIMEZONE}
    checkError "setting timezone"
    ln -s /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
  fi
}

setup_language() {
  export LANG=${LOCALE}
  echo LANG=${LOCALE} > /etc/locale.conf
  sed -e "s/^#${LOCALE}/${LOCALE}/" -i /etc/locale.gen
  locale-gen

  # keymap
  echo "KEYMAP=${KEYMAP}" > /etc/vconsole.conf
}

setup_hostname() {
  if [[ ${HOSTNAME} =~ "." ]] ; then
    DOMAINAME=$(echo ${HOSTNAME} | cut -d. -f2-)
    HOSTNAME=$(echo ${HOSTNAME} | cut -d. -f1)
  fi
  echo ${HOSTNAME} > /etc/hostname
  echo "127.0.0.1 localhost" > /etc/hosts
  echo "::1 localhost" >> /etc/hosts
  if [[ -z "${DOMAINAME}" ]] ; then
    echo "127.0.1.1 ${HOSTNAME}" >> /etc/hosts
  else
    echo "127.0.1.1 ${HOSTNAME}.${DOMAINNAME} ${HOSTNAME}" >> /etc/hosts
  fi
}

setup_user() {
  # create user
  cp -r /etc/skel /home/${USERNAME}
  groupadd -g 1000 ${USERNAME}
  useradd -u 1000 -g ${USERNAME} -G wheel -s /bin/bash ${USERNAME}
  echo "${USERNAME}:${PASSWORD}" | chpasswd
  chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}

  # sudo
  mkdir -p /etc/sudoers.d
  echo "${USERNAME} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/${USERNAME}

  # ssh-key
  if [[ ! -z ${SSHKEY} ]] ; then
    mkdir -p /home/${USERNAME}/.ssh
    echo "${SSHKEY}" > /home/${USERNAME}/.ssh/authorized_keys
    chmod 644 /home/${USERNAME}/.ssh/authorized_keys
    chmod 700 /home/${USERNAME}/.ssh
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.ssh
  fi
}

setup_network() {
  echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/30-ipforward.conf
  echo -e "[Match]\nName=en*\n[Network]\nDHCP=yes" > /etc/systemd/network/20-wired.network
  chmod 755 /etc/systemd/network/20-wired.network

  systemctl enable systemd-networkd.service
  systemctl enable systemd-resolved.service

  # enable network configuration
  systemctl enable iwd
  mkdir -p /etc/iwd
  echo -e "[General]\nEnableNetworkConfiguration=true" > /etc/iwd/main.conf
}

setup_apps() {
  # swap
  systemctl enable systemd-swap

  # vi
  rm /usr/bin/vi 2> /dev/null
  ln -s /usr/bin/vim /usr/bin/vi

  # sshd
  systemctl enable sshd.service

  # key for aur
  gpg --keyserver keyserver.ubuntu.com --recv-keys 5C4A26CD4CC8C397
}

setup_bootloader() {
  # grub setup
  if [[ ${BIOS_BOOTLOADER} == -b ]] ; then
    grub-install --target=i386-pc ${DEVICE}
  else
    grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi
  fi
  grub-mkconfig -o /boot/grub/grub.cfg
}

bootstrap() {
  init_os
  
  # partition and format target device
  setup_drive ${DEVICE}

  # mount partitions
  mkdir -p /mnt
  mount ${partRoot} /mnt
  if [[ ${BIOS_BOOTLOADER} != -b ]] ; then
    mkdir -p /mnt/boot
    mount ${partBoot} /mnt/boot
  fi

  # install to drive
  packages="base linux${LTS} linux${LTS}-headers linux-firmware reflector vim git systemd-swap htop sudo grub efibootmgr openssh archlinux-keyring base-devel man lm_sensors networkmanager openresolv iwd"
  pacstrap /mnt $packages

  # copy wi-fi
  if [[ $(ls /var/lib/iwd/*.psk 2> /dev/null) ]] ; then
    mkdir -p /mnt/var/lib/iwd
    chmod 700 /mnt/var/lib/iwd
    cp -a /var/lib/iwd/*.psk /mnt/var/lib/iwd/*.psk
  fi

  # generate fstab
  genfstab -U /mnt >> /mnt/etc/fstab

  # setup and run post-pacstrap
  echo "curl -L ${SCRIPTURL} | bash -s -- -P -c ${COUNTRIES} ${BIOS_BOOTLOADER} -n ${HOSTNAME} -l ${LOCALE} -k ${KEYMAP} -t ${TIMEZONE} -u ${USERNAME} -p ${PASSWORD} -s '${SSHKEY}'" > /mnt/post-pacstrap
  chmod +x /mnt/post-pacstrap
  arch-chroot /mnt /post-pacstrap
  rm /mnt/post-pacstrap

  # unmount partitions
  umount ${partBoot} ${partRoot} 2> /dev/null
}

main() {
  while getopts "LPbc:d:hk:l:n:p:s:t:u:w:" option; do
    case "${option}" in
    L)
      export LTS="-lts"
      ;;
    P)
      export POST_PACSTRAP=1
      ;;
    b)
      export BIOS_BOOTLOADER="-b"
      ;;
    c)
      export COUNTRIES="${OPTARG}"
      ;;
    d)
      if [[ -b /dev/${OPTARG} ]] ; then
        export DEVICE="/dev/${OPTARG}"
      elif [[ -b ${OPTARG} ]] ; then
        export DEVICE="${OPTARG}"
      fi
      ;;
    h)
      echo "help: TBD"
      exit
      ;;
    k)
      export KEYMAP="${OPTARG}"
      ;;
    l)
      export LOCALE="${OPTARG}"
      ;;
    n)
      export HOSTNAME="${OPTARG}"
      ;;
    p)
      export PASSWORD="${OPTARG}"
      ;;
    s)
      if [[ ! -z ${OPTARG} ]] ; then
        export SSHKEY="${OPTARG}"
      fi
      ;;
    t)
      if [[ -f "/usr/share/zoneinfo/${TIMEZONE}" ]] ; then
        export TIMEZONE="${OPTARG}"
      fi
      ;;
    u)
      export USERNAME="${OPTARG}"
      ;;
    w)
      init_wifi ${OPTARG}
      ;;
    esac
  done
  shift $((OPTIND-1))

  if [[ -z ${POST_PACSTRAP} ]] ; then
    bootstrap
  else
    setup_datetime
    setup_language
    setup_hostname
    setup_user
    setup_network
    setup_apps
    setup_bootloader
  fi
}

main "$@"
